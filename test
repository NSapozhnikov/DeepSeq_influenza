

# URL_seq = 'http://ftp.sra.ebi.ac.uk/vol1/fastq/SRR170/001/SRR1705851/SRR1705851.fastq.gz'
# # URL_ref = ''



# rule all:
#     input:
#         os.path.join('data', 'SRR1705851_ref.SRR1705851_seqs.varscan_results.vcf')
# # SRR1705851_ref.SRR1705851_seqs.sorted.indexed.bam.bai

# rule get_seqs:
#     output: 
#         os.path.join('data', 'SRR1705851_seqs.fastq.gz')
#     shell:
#         'wget -O {output} {URL_seq}'


# # rule get_ref:
# #     output:
# #         os.path.join('data', 'SRR1705851_ref.fasta')
# #     shell:
# #         'wget -O {output} {URL_ref}'


# rule bwa_index:
#     input:
#         os.path.join('data', '{reference}.fasta')
#     output:
#         os.path.join('data', '{reference}.fasta.amb'),
#         os.path.join('data', '{reference}.fasta.ann'),
#         os.path.join('data', '{reference}.fasta.bwt'),
#         os.path.join('data', '{reference}.fasta.pac'),
#         os.path.join('data', '{reference}.fasta.sa')
#     shell:
#         'bwa index {input}'


# rule bwa_align:
#     input:
#         os.path.join('data', '{reference}.fasta.amb'),
#         os.path.join('data', '{reference}.fasta.ann'),
#         os.path.join('data', '{reference}.fasta.bwt'),
#         os.path.join('data', '{reference}.fasta.pac'),
#         os.path.join('data', '{reference}.fasta.sa'),
#         ref=os.path.join('data', '{reference}.fasta'),
#         reads=os.path.join('data', '{seqs}.fastq.gz')
#     threads: 12
#     log:
#         'logs/bwa.{reference}.{seqs}.log'
#     output:
#         temporary(os.path.join('data', '{reference}.{seqs}.unsorted.bam'))
#     shell:
#         'bwa mem -t {threads} {input.ref} {input.reads} 2>{log} | samtools view -b > {output}'


# rule bam_sort:
#     input:
#         rules.bwa_align.output     
#     output:
#         protected(os.path.join('data', '{reference}.{seqs}.sorted.bam'))
#     threads: 12
#     shell:
#         'samtools sort --threads {threads} {input} > {output}'


# rule index_sorted_bam:
#     input:
#         rules.bam_sort.output
#     output:
#         protected(os.path.join('data', '{reference}.{seqs}.sorted.indexed.bam.bai'))
#     threads: 12
#     shell:
#         'samtools index {input} {output} -@ {threads}'


# rule mpileup_seqs:
#     input:
#         ref=os.path.join('data', '{reference}.fasta'),
#         bam=rules.bam_sort.output
#     output:
#         os.path.join('data', '{reference}.{seqs}.sorted.indexed.mpileup')
#     threads: 12
#     shell:
#         'samtools mpileup -d 0 -f {input.ref} {input.bam} >  {output}'


# rule variant_calling:
#     input: 
#         rules.mpileup_seqs.output
#     output: 
#         os.path.join('data', '{reference}.{seqs}.varscan_results.vcf')
#     shell:
#         'java -jar /mnt/d/Bioinformatics/VarScan/VarScan.v2.3.9.jar  mpileup2snp {input} --min-var-freq 0.001 --variants --output-vcf 1 > {output}'    
